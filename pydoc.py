import os
import re
import datetime

def find_cs_files(directory = "", files = []):
    cwd = os.getcwd()
    full_path = os.path.join(cwd, directory) if len(directory) > 0 else cwd
    content = os.listdir( full_path )
    for c in content:
        if os.path.isdir(os.path.join(full_path, c)):
            find_cs_files(os.path.join(full_path, c), files)
        else:
            if c[-3:] == '.cs': files.append([c, os.path.join(full_path, c)])
    return files

def find_csproj_files(directory = "", files = []):
    cwd = os.getcwd()
    full_path = os.path.join(cwd, directory) if len(directory) > 0 else cwd
    content = os.listdir( full_path )
    for c in content:
        if os.path.isdir(os.path.join(full_path, c)):
            find_csproj_files(os.path.join(full_path, c), files)
        else:
            if c[-7:] == '.csproj': files.append([c, os.path.join(full_path, c)])
    return files

class ClassExtractor():
    def __init__(self, source):
        self.source = source
        
    def find_next_class(self, head):
        return self.source.find('class', head) - len('public ')
        
    def find_closing_tag(self, head):
        index = head; tags = ['{', '}']
        while self.source[index] != tags[0] and index < len(self.source) - 1: index += 1
        open_tag_count = 1
        index += 1
        while open_tag_count > 0 and index < len(self.source) - 1:
            if self.source[index] == tags[0]: open_tag_count += 1
            if self.source[index] == tags[1]: open_tag_count -= 1
            index += 1
        return index
    
    def find_classes(self):
        head = 0; classes = []
        while self.find_next_class(head) > 0:
            start = self.find_next_class(head)
            end = self.find_closing_tag(head)
            classes.append(source[start:end])
            head = end+1
        return classes

def read_contents(path):
    content = ""
    with open(path, encoding='utf-8') as f:
        lines = f.readlines()
        content = " ".join([x.strip() for x in lines])
    return content

regex_match_properties = '(public|private) ([\w?<>.]*) ([\w]*)\s*?{'
regex_match_methods = '(public|private)[\w]*? (\w*)? ?([\w<>\[\]]*) (\w*) ?\(([\w ,<>\[\].]*)\)'

def regex_match(regex, string):
    return re.findall(regex, string)

def get_properties(source):
    return [x for x in regex_match(regex_match_properties, source) if x[1] != 'class']

def get_methods(source):
    return regex_match(regex_match_methods, source)

def find_project_name(files):
    csproj = ''
    for f, d in files:
        if '.csproj' in f:
            csproj = f
    return csproj[0:len(csproj)-7]

files = find_cs_files()
project_name = find_project_name(find_csproj_files())
output_file_name = '{}.md'.format(project_name)

with open(output_file_name, 'w', encoding='utf-8') as out:

    out.truncate(0) 
    out.write('# {}\r\n'.format(project_name))
    out.write('Documentation is automatically generated by PyDoc. This document has been generated on _{}_.\r\n'.format(datetime.datetime.now().strftime("%Y-%m-%d %H:%M")))

    for file in files:

        file_name, file_path = file[0], file[1]
        source = read_contents(file_path)
        ce = ClassExtractor(source)
        classes = ce.find_classes()

        for c in classes:

            out.write('## {}\r\n'.format( file_name[0:file_name.find('.')]  ))
            out.write('**Filename:** {}\n'.format(file_name))
            out.write('**Filepath:** `{}`\r\n'.format(file_path))

            out.write('### Properties\r\n')
            properties = get_properties(c)

            if len(properties) > 0:
                out.write('This class has the following {} properties:\r\n'.format(len(properties)))
                out.write('```csharp\n')
                for access_level, property_type, property_name in properties:
                    result = '{} {} {}\n'.format(access_level, property_type, property_name)
                    out.write(result)
                    print('\t{}'.format(result[:-1]))
                out.write('```\r\n')
            else:
                out.write('This class has no properties.\r\n')
            
            out.write('### Methods\r\n')
            methods = get_methods(c)

            if len(methods) > 0:
                out.write('This class has the following {} methods:\r\n'.format(len(methods)))
                out.write('```csharp\n')
                for access_level, id1, return_type, method_name, parameters in methods:
                    result = ''
                    for x in [access_level, id1]:
                        if not x: continue
                        result += '{} '.format(x)
                    result = '{}{} {}({})'.format(result, return_type, method_name, parameters)
                    out.write('{}\n'.format(result))
                    print('\t{}'.format(result))
                out.write('```\r\n')
            else:
                out.write('This class has no methods.\r\n')

        print('Found {} classes in {}.'.format(len(classes), file_name))

print('Wrote the result to {}.'.format(output_file_name))